# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Deploy on Tag

on:
  push:
    tags:
      - 'v*'

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.DEPLOY }}

    - name: Deploy to EC2
      run: |
        echo "GITHUB_REF is ${GITHUB_REF}"
        echo "env GITHUB_REF_NAME is ${{ env.GITHUB_REF_NAME }}"
        echo "Tag name is ${GITHUB_REF#refs/tags/}"
        ssh -o StrictHostKeyChecking=no ubuntu@52.195.229.41 << EOF
        cd Flask-Vue-Nginx
        git fetch --tags
        TAG_NAME=${{  env.GITHUB_REF_NAME }}
        if git branch --list deploy-branch; then
          echo "Resetting existing branch deploy-branch to tag $TAG_NAME."
          git switch deploy-branch
          git reset --hard tags/$TAG_NAME
        else
          echo "Creating and switching to new branch deploy-branch based on tag $TAG_NAME."
          git checkout tags/$TAG_NAME -b deploy-branch
        fi
        # Checkout the specific tag received from the GitHub Action trigger
        # git checkout tags/${GITHUB_REF#refs/tags/} -b deploy-branch
        # Clean up unused docker images to save disk space
        docker image prune -a -f --filter "until=24h"
        # Run docker-compose up -d
        docker-compose -f docker-compose-deploy.yml up -d
        EOF
