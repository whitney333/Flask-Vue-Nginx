{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nexport default {\n  name: \"GoogleTrendRisingQuery\",\n  components: {\n    apexchart: VueApexCharts\n  },\n  data() {\n    return {\n      series: [],\n      chartOptions: {\n        noData: {\n          text: 'Loading...',\n          align: 'center',\n          verticalAlign: 'middle',\n          style: {\n            color: '#525050',\n            fontSize: '18px',\n            fontWeight: 'bold',\n            fontFamily: 'Cairo'\n          }\n        },\n        chart: {\n          height: '100%',\n          width: '100%',\n          type: 'bar',\n          toolbar: {\n            show: true\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        plotOptions: {\n          bar: {\n            horizontal: true,\n            columnWidth: '50%',\n            borderRadius: 5\n          }\n        },\n        yaxis: {\n          categories: [],\n          labels: {\n            show: true,\n            formatter: function (str) {\n              const n = 10;\n              return str.length > n ? str.substr(0, n - 1) + '...' : str;\n            },\n            style: {\n              fontSize: '16px'\n            }\n          }\n        },\n        xaxis: {\n          labels: {\n            formatter: function (value) {\n              if (String(value).length < 4) {\n                return Number(value).toLocaleString();\n              } else if (String(value).length < 7) {\n                return Number(value / 1000).toLocaleString() + 'K';\n              } else if (String(value).length < 10) {\n                return Number(value / 1000000).toLocaleString() + 'M';\n              } else {\n                return Number(value / 1000000000).toLocaleString() + 'B';\n              }\n            },\n            style: {\n              fontSize: '14px'\n            }\n          }\n        },\n        tooltip: {\n          theme: 'light',\n          x: {\n            show: true\n          },\n          custom: function ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) {\n            return '<div class=\"arrow_box\">' + \"<span>\" + w.globals.labels[dataPointIndex] + \": \" + series[seriesIndex][dataPointIndex].toLocaleString() + \"</span>\" + \"</div>\";\n          }\n        },\n        title: {\n          text: \"YouTube Rising Query\",\n          style: {\n            fontSize: '24px',\n            fontWeight: 'bold',\n            fontFamily: 'Cairo'\n          },\n          align: 'left'\n        },\n        grid: {\n          show: true,\n          position: 'back',\n          borderColor: '#90A4AE'\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            // shade: 'dark',\n            type: \"horizontal\",\n            shadeIntensity: 0.5,\n            gradientToColors: ['#bca9f3'],\n            // optional, if not defined - uses the shades of same color in series\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 100],\n            colorStops: []\n          }\n        },\n        colors: ['#FFBE98']\n      }\n    };\n  },\n  methods: {\n    async get_rising_query() {\n      await this.axios.get(\"http://localhost/api/google-trends/youtube-rising-query\", {\n        setTimeout: 10000\n      }).then(res => {\n        this.rising_query = res[\"data\"];\n        let formattedData = this.rising_query.map((e, i) => {\n          return {\n            x: e.query,\n            y: e.value\n          };\n        });\n        // update the series with axios data\n        this.series = [{\n          name: \"Rising Query\",\n          data: formattedData\n        }];\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  },\n  created() {\n    this.get_rising_query();\n  },\n  filters: {\n    truncateText: text => {\n      if (text.length > 6) {\n        text = text.substring(0, 6) + \"...\";\n      }\n      return text;\n    }\n  }\n};","map":{"version":3,"names":["VueApexCharts","name","components","apexchart","data","series","chartOptions","noData","text","align","verticalAlign","style","color","fontSize","fontWeight","fontFamily","chart","height","width","type","toolbar","show","dataLabels","enabled","plotOptions","bar","horizontal","columnWidth","borderRadius","yaxis","categories","labels","formatter","str","n","length","substr","xaxis","value","String","Number","toLocaleString","tooltip","theme","x","custom","seriesIndex","dataPointIndex","w","globals","title","grid","position","borderColor","fill","gradient","shadeIntensity","gradientToColors","inverseColors","opacityFrom","opacityTo","stops","colorStops","colors","methods","get_rising_query","axios","get","setTimeout","then","res","rising_query","formattedData","map","e","i","query","y","catch","err","console","log","created","filters","truncateText","substring"],"sources":["src/components/GoogleTrendRisingQuery.vue"],"sourcesContent":["<template>\r\n  <div id=\"google-chart\">\r\n    <apexchart\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n        ref=\"chart\"\r\n        height=\"500\"\r\n    >\r\n    </apexchart>\r\n  </div>\r\n</template>\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\nexport default {\r\n  name: \"GoogleTrendRisingQuery\",\r\n  components: {\r\n    apexchart: VueApexCharts\r\n  },\r\n  data() {\r\n    return {\r\n      series: [],\r\n      chartOptions: {\r\n        noData: {\r\n          text: 'Loading...',\r\n          align: 'center',\r\n          verticalAlign: 'middle',\r\n          style: {\r\n            color: '#525050',\r\n            fontSize: '18px',\r\n            fontWeight: 'bold',\r\n            fontFamily: 'Cairo'\r\n          }\r\n        },\r\n        chart: {\r\n          height: '100%',\r\n          width: '100%',\r\n          type: 'bar',\r\n          toolbar: {\r\n            show: true\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            horizontal: true,\r\n            columnWidth: '50%',\r\n            borderRadius: 5\r\n          }\r\n        },\r\n        yaxis: {\r\n          categories: [],\r\n          labels: {\r\n            show: true,\r\n            formatter: function (str) {\r\n              const n = 10\r\n              return str.length > n ? str.substr(0, n - 1) + '...' : str\r\n            },\r\n          style: {\r\n            fontSize: '16px'\r\n          }\r\n        }\r\n        },\r\n        xaxis: {\r\n          labels: {\r\n            formatter: function (value) {\r\n              if (String(value).length < 4) {\r\n                return Number(value).toLocaleString();\r\n              } else if (String(value).length < 7) {\r\n                return Number(value / 1000).toLocaleString() + 'K';\r\n              } else if (String(value).length < 10) {\r\n                return Number(value / 1000000).toLocaleString() + 'M';\r\n              } else {\r\n                return Number(value / 1000000000).toLocaleString() + 'B';\r\n              }\r\n            },\r\n            style: {\r\n              fontSize: '14px'\r\n            }\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: 'light',\r\n          x: {\r\n            show: true\r\n          },\r\n          custom: function ({series, seriesIndex, dataPointIndex, w}) {\r\n            return (\r\n                '<div class=\"arrow_box\">' +\r\n                \"<span>\" +\r\n                w.globals.labels[dataPointIndex] +\r\n                \": \" +\r\n                (series[seriesIndex][dataPointIndex]).toLocaleString() +\r\n                \"</span>\" +\r\n                \"</div>\"\r\n            );\r\n          }\r\n        },\r\n        title: {\r\n          text: \"YouTube Rising Query\",\r\n          style: {\r\n            fontSize: '24px',\r\n            fontWeight: 'bold',\r\n            fontFamily: 'Cairo',\r\n          },\r\n          align: 'left'\r\n        },\r\n        grid: {\r\n          show: true,\r\n          position: 'back',\r\n          borderColor: '#90A4AE'\r\n        },\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            // shade: 'dark',\r\n            type: \"horizontal\",\r\n            shadeIntensity: 0.5,\r\n            gradientToColors: ['#bca9f3'], // optional, if not defined - uses the shades of same color in series\r\n            inverseColors: true,\r\n            opacityFrom: 1,\r\n            opacityTo: 1,\r\n            stops: [0, 50, 100],\r\n            colorStops: []\r\n          }\r\n        },\r\n        colors: ['#FFBE98'],\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async get_rising_query() {\r\n      await this.axios.get(\"http://localhost/api/google-trends/youtube-rising-query\",\r\n          {setTimeout: 10000})\r\n      .then(res => {\r\n        this.rising_query = res[\"data\"]\r\n\r\n        let formattedData = this.rising_query.map((e, i) => {\r\n        return {\r\n          x: e.query,\r\n          y: e.value,\r\n        }\r\n        });\r\n          // update the series with axios data\r\n        this.series = [\r\n            {\r\n              name: \"Rising Query\",\r\n              data: formattedData,\r\n            }\r\n        ]\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.get_rising_query();\r\n  },\r\n  filters: {\r\n    truncateText: (text) => {\r\n      if (text.length > 6) {\r\n        text = text.substring(0, 6) + \"...\";\r\n      }\r\n      return text;\r\n    }\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}