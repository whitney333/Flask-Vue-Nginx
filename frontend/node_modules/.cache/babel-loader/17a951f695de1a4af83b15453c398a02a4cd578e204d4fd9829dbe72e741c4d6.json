{"ast":null,"code":"import VueApexCharts from 'vue-apexcharts';\nexport default {\n  name: \"SpotifyTopCity\",\n  components: {\n    apexchart: VueApexCharts\n  },\n  data: function () {\n    return {\n      latest_date: \"\",\n      series: [],\n      chartOptions: {\n        chart: {\n          height: 'auto',\n          type: 'bar'\n        },\n        dataLabels: {\n          enabled: true,\n          textAnchor: 'middle',\n          dropShadow: {\n            enabled: true\n          },\n          style: {\n            colors: ['#ffffff'],\n            fontSize: '14px'\n          },\n          formatter: function (val, opt) {\n            return opt.w.globals.labels[opt.dataPointIndex];\n          }\n        },\n        plotOptions: {\n          bar: {\n            distributed: true,\n            borderRadius: 6,\n            horizontal: true\n          }\n        },\n        colors: [\"#115f9a\", \"#00A9FF\", \"#89CFF3\", \"#A0E9FF\", \"#CDF5FD\"],\n        legend: {\n          show: false\n        },\n        yaxis: {\n          type: 'category',\n          labels: {\n            show: false,\n            style: {\n              fontSize: '12px',\n              fontWeight: 'bold',\n              fontFamily: 'Cairo'\n            }\n          },\n          title: {\n            text: 'Top Cities',\n            style: {\n              fontSize: '14px',\n              fontFamily: 'Cairo, sans-serif',\n              fontWeight: 600\n            }\n          }\n        },\n        xaxis: {\n          type: 'category',\n          labels: {\n            formatter: function (value) {\n              if (String(value).length < 4) {\n                return Number(value).toLocaleString();\n              } else if (String(value).length < 7) {\n                return Number(value / 1000).toLocaleString() + 'K';\n              } else if (String(value).length < 10) {\n                return Number(value / 1000000).toLocaleString() + 'M';\n              } else {\n                return Number(value / 1000000000).toLocaleString() + 'B';\n              }\n            }\n          },\n          title: {\n            text: 'Total Listeners',\n            style: {\n              fontSize: '14px',\n              fontFamily: 'Cairo, sans-serif',\n              fontWeight: 600\n              // cssClass: 'apexcharts-xaxis-title',\n            }\n          }\n        },\n\n        tooltip: {\n          theme: 'light',\n          custom: function ({\n            series,\n            seriesIndex,\n            dataPointIndex\n          }) {\n            return '<div class=\"arrow_box\">' + \"<span>\" +\n            // w.globals.labels +\n            \"Listeners: \" + series[seriesIndex][dataPointIndex].toLocaleString() + \"</span>\" + \"</div>\";\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    async get_city() {\n      const {\n        data\n      } = await this.axios.get('http://localhost/api/spotify/top-city', {\n        setTimeout: 10000\n      });\n      this.city = data['result'];\n      this.latest_date = data['result'][0]['date'];\n      // console.log(this.city)\n\n      const formattedData = this.city.map((e, i) => {\n        return {\n          x: e.city,\n          y: e.city_listener\n        };\n      });\n      // console.log(formattedData)\n\n      // update the series with axios data\n      this.series = [{\n        name: this.city,\n        data: formattedData\n      }];\n    }\n  },\n  created() {\n    this.get_city();\n  }\n};","map":{"version":3,"names":["VueApexCharts","name","components","apexchart","data","latest_date","series","chartOptions","chart","height","type","dataLabels","enabled","textAnchor","dropShadow","style","colors","fontSize","formatter","val","opt","w","globals","labels","dataPointIndex","plotOptions","bar","distributed","borderRadius","horizontal","legend","show","yaxis","fontWeight","fontFamily","title","text","xaxis","value","String","length","Number","toLocaleString","tooltip","theme","custom","seriesIndex","methods","get_city","axios","get","setTimeout","city","formattedData","map","e","i","x","y","city_listener","created"],"sources":["src/components/SpotifyTopCity.vue"],"sourcesContent":["<template>\r\n  <div id=\"spotify-listener-city-chart\">\r\n    <v-row justify=\"end\">\r\n      <v-col cols=\"12\">\r\n        <div class=\"chart-latest-update\">\r\n            <span>Last updated\r\n              <span>{{ this.latest_date }}</span>\r\n            </span>\r\n        </div>\r\n      </v-col>\r\n    </v-row>\r\n    <apexchart\r\n        ref=\"chart\"\r\n        width=\"100%\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n        height=\"450\"\r\n    >\r\n    </apexchart>\r\n  </div>\r\n</template>\r\n<script>\r\nimport VueApexCharts from 'vue-apexcharts'\r\nexport default {\r\n  name: \"SpotifyTopCity\",\r\n  components: {\r\n    apexchart: VueApexCharts,\r\n  },\r\n  data: function () {\r\n    return {\r\n      latest_date: \"\",\r\n      series: [],\r\n      chartOptions: {\r\n        chart: {\r\n          height: 'auto',\r\n          type: 'bar',\r\n        },\r\n        dataLabels: {\r\n          enabled: true,\r\n          textAnchor: 'middle',\r\n          dropShadow: {\r\n            enabled: true\r\n          },\r\n          style: {\r\n            colors: ['#ffffff'],\r\n            fontSize: '14px'\r\n          },\r\n          formatter: function (val, opt) {\r\n            return opt.w.globals.labels[opt.dataPointIndex]\r\n          },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            distributed: true,\r\n            borderRadius: 6,\r\n            horizontal: true\r\n          }\r\n        },\r\n        colors: [\"#115f9a\", \"#00A9FF\", \"#89CFF3\", \"#A0E9FF\", \"#CDF5FD\"],\r\n        legend: {\r\n          show: false\r\n        },\r\n        yaxis: {\r\n          type: 'category',\r\n          labels: {\r\n            show: false,\r\n            style: {\r\n              fontSize: '12px',\r\n              fontWeight: 'bold',\r\n              fontFamily: 'Cairo',\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Top Cities',\r\n            style: {\r\n              fontSize: '14px',\r\n              fontFamily: 'Cairo, sans-serif',\r\n              fontWeight: 600,\r\n            },\r\n          },\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          labels: {\r\n            formatter: function (value) {\r\n              if (String(value).length < 4) {\r\n                return Number(value).toLocaleString();\r\n              } else if (String(value).length < 7) {\r\n                return Number(value / 1000).toLocaleString() + 'K';\r\n              } else if (String(value).length < 10) {\r\n                return Number(value / 1000000).toLocaleString() + 'M';\r\n              } else {\r\n                return Number(value / 1000000000).toLocaleString() + 'B';\r\n              }\r\n            }\r\n          },\r\n          title: {\r\n            text: 'Total Listeners',\r\n            style: {\r\n              fontSize: '14px',\r\n              fontFamily: 'Cairo, sans-serif',\r\n              fontWeight: 600,\r\n              // cssClass: 'apexcharts-xaxis-title',\r\n            },\r\n          },\r\n        },\r\n        tooltip: {\r\n          theme: 'light',\r\n          custom: function ({series, seriesIndex, dataPointIndex}) {\r\n            return (\r\n                '<div class=\"arrow_box\">' +\r\n                \"<span>\" +\r\n                // w.globals.labels +\r\n                \"Listeners: \" +\r\n                (series[seriesIndex][dataPointIndex]).toLocaleString() +\r\n                \"</span>\" +\r\n                \"</div>\"\r\n            );\r\n          }\r\n        },\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async get_city() {\r\n      const {data} = await this.axios.get('http://localhost/api/spotify/top-city', {setTimeout: 10000})\r\n\r\n      this.city = data['result']\r\n      this.latest_date = data['result'][0]['date']\r\n      // console.log(this.city)\r\n\r\n      const formattedData = this.city.map((e, i) => {\r\n            return {\r\n              x: e.city,\r\n              y: e.city_listener\r\n            }\r\n      })\r\n      // console.log(formattedData)\r\n\r\n      // update the series with axios data\r\n      this.series = [\r\n        {\r\n          name: this.city,\r\n          data: formattedData,\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  created() {\r\n    this.get_city();\r\n  }\r\n}\r\n</script>\r\n<style scoped>\r\n</style>\r\n"],"mappings":"AAsBA,OAAAA,aAAA;AACA;EACAC,IAAA;EACAC,UAAA;IACAC,SAAA,EAAAH;EACA;EACAI,IAAA,WAAAA,CAAA;IACA;MACAC,WAAA;MACAC,MAAA;MACAC,YAAA;QACAC,KAAA;UACAC,MAAA;UACAC,IAAA;QACA;QACAC,UAAA;UACAC,OAAA;UACAC,UAAA;UACAC,UAAA;YACAF,OAAA;UACA;UACAG,KAAA;YACAC,MAAA;YACAC,QAAA;UACA;UACAC,SAAA,WAAAA,CAAAC,GAAA,EAAAC,GAAA;YACA,OAAAA,GAAA,CAAAC,CAAA,CAAAC,OAAA,CAAAC,MAAA,CAAAH,GAAA,CAAAI,cAAA;UACA;QACA;QACAC,WAAA;UACAC,GAAA;YACAC,WAAA;YACAC,YAAA;YACAC,UAAA;UACA;QACA;QACAb,MAAA;QACAc,MAAA;UACAC,IAAA;QACA;QACAC,KAAA;UACAtB,IAAA;UACAa,MAAA;YACAQ,IAAA;YACAhB,KAAA;cACAE,QAAA;cACAgB,UAAA;cACAC,UAAA;YACA;UACA;UACAC,KAAA;YACAC,IAAA;YACArB,KAAA;cACAE,QAAA;cACAiB,UAAA;cACAD,UAAA;YACA;UACA;QACA;QACAI,KAAA;UACA3B,IAAA;UACAa,MAAA;YACAL,SAAA,WAAAA,CAAAoB,KAAA;cACA,IAAAC,MAAA,CAAAD,KAAA,EAAAE,MAAA;gBACA,OAAAC,MAAA,CAAAH,KAAA,EAAAI,cAAA;cACA,WAAAH,MAAA,CAAAD,KAAA,EAAAE,MAAA;gBACA,OAAAC,MAAA,CAAAH,KAAA,SAAAI,cAAA;cACA,WAAAH,MAAA,CAAAD,KAAA,EAAAE,MAAA;gBACA,OAAAC,MAAA,CAAAH,KAAA,YAAAI,cAAA;cACA;gBACA,OAAAD,MAAA,CAAAH,KAAA,eAAAI,cAAA;cACA;YACA;UACA;UACAP,KAAA;YACAC,IAAA;YACArB,KAAA;cACAE,QAAA;cACAiB,UAAA;cACAD,UAAA;cACA;YACA;UACA;QACA;;QACAU,OAAA;UACAC,KAAA;UACAC,MAAA,WAAAA,CAAA;YAAAvC,MAAA;YAAAwC,WAAA;YAAAtB;UAAA;YACA,OACA,4BACA;YACA;YACA,gBACAlB,MAAA,CAAAwC,WAAA,EAAAtB,cAAA,EAAAkB,cAAA,KACA,YACA;UAEA;QACA;MACA;IACA;EACA;EACAK,OAAA;IACA,MAAAC,SAAA;MACA;QAAA5C;MAAA,eAAA6C,KAAA,CAAAC,GAAA;QAAAC,UAAA;MAAA;MAEA,KAAAC,IAAA,GAAAhD,IAAA;MACA,KAAAC,WAAA,GAAAD,IAAA;MACA;;MAEA,MAAAiD,aAAA,QAAAD,IAAA,CAAAE,GAAA,EAAAC,CAAA,EAAAC,CAAA;QACA;UACAC,CAAA,EAAAF,CAAA,CAAAH,IAAA;UACAM,CAAA,EAAAH,CAAA,CAAAI;QACA;MACA;MACA;;MAEA;MACA,KAAArD,MAAA,IACA;QACAL,IAAA,OAAAmD,IAAA;QACAhD,IAAA,EAAAiD;MACA,EACA;IACA;EACA;EACAO,QAAA;IACA,KAAAZ,QAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}