{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nexport default {\n  name: \"SpotifyRegionTopTrack\",\n  components: {\n    apexchart: VueApexCharts\n  },\n  data() {\n    return {\n      index_number: \"\",\n      latest_date: \"\",\n      series: [],\n      track_list: [],\n      top_one_song: \"fox\",\n      selected_track: \"\",\n      chartOptions: {\n        chart: {\n          height: '100%',\n          width: '100%',\n          type: 'radar',\n          dropShadow: {\n            enabled: true,\n            blur: 1,\n            left: 1,\n            top: 1\n          }\n        },\n        stroke: {\n          width: 2\n        },\n        plotOptions: {\n          radar: {\n            size: 100,\n            polygons: {\n              strokeColors: '#202850',\n              strokeWidth: 1,\n              connectorColors: ['#808080', '#f1f1f1'],\n              fill: {\n                colors: ['#fcfcfc']\n              }\n            }\n          }\n        },\n        fill: {\n          opacity: 0.1\n        },\n        colors: ['#FF4560'],\n        markers: {\n          size: 5,\n          colors: ['#fff'],\n          strokeColor: '#FF4560',\n          strokeWidth: 2\n        },\n        xaxis: {\n          labels: {\n            show: true,\n            style: {\n              color: [\"#101d4d\"],\n              fontSize: \"20px\",\n              fontFamily: \"Cairo\"\n            }\n          },\n          categories: ['Asia', 'North America', 'South America', 'Oceania', 'Europe']\n        },\n        yaxis: {\n          show: true,\n          tickAmount: 6\n        }\n      }\n    };\n  },\n  methods: {\n    async get_default_top_track_by_region() {\n      const {\n        data\n      } = await this.axios.get('http://localhost/api/spotify/top-track/region?' + \"track=\" + this.top_one_song, {\n        setTimeout: 10000\n      });\n      this.tracks = data['result'][0][\"track_info\"];\n      this.track_list = data[\"track_select_list\"][0][\"track\"];\n      console.log(this.track_list);\n\n      // this.latest_date = data['result'][0]['date']\n      onsloe.log(this.tracks);\n      const formattedData = this.tracks.map((e, i) => {\n        return {\n          x: e.region,\n          y: e.agg_popularity\n        };\n      });\n      // console.log(formattedData)\n\n      // update the series with axios data\n      this.series = [{\n        name: this.tracks,\n        data: formattedData\n      }];\n    },\n    async fetch_top_track_by_region() {\n      const {\n        data\n      } = await this.axios.get('http://localhost/api/spotify/top-track/region?' + \"track=\" + this.selected_track, {\n        setTimeout: 10000\n      });\n      this.tracks = data['result'][0][\"track_info\"];\n      this.track_list = data[\"track_select_list\"][0][\"track\"];\n\n      // this.latest_date = data['result'][0]['date']\n      // consloe.log(this.tracks)\n\n      const formattedData = this.tracks.map((e, i) => {\n        return {\n          x: e.region,\n          y: e.agg_popularity\n        };\n      });\n      // console.log(formattedData)\n\n      // update the series with axios data\n      this.series = [{\n        name: this.tracks,\n        data: formattedData\n      }];\n    },\n    async get_top_song() {\n      let _date = new Date();\n      this.end_date = _date.toISOString().split('T')[0];\n      await this.axios.get(\"http://localhost/api/spotify/top-track?\" + \"end=\" + this.end_date + \"&country=\" + \"KR\" + \"&drange=\" + \"\", {\n        setTimeout: 5000\n      }).then(res => {\n        this.top_one_song = res.data[\"posts\"][0][\"top_track\"][0][\"track\"];\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  },\n  created() {\n    this.get_top_song();\n    this.get_default_top_track_by_region();\n    this.fetch_top_track_by_region();\n  },\n  mounted: {\n    function() {\n      this.get_default_top_track_by_region();\n      this.fetch_top_track_by_region();\n    }\n  },\n  computed: {\n    function() {\n      this.get_top_song();\n    }\n  }\n};","map":{"version":3,"names":["VueApexCharts","name","components","apexchart","data","index_number","latest_date","series","track_list","top_one_song","selected_track","chartOptions","chart","height","width","type","dropShadow","enabled","blur","left","top","stroke","plotOptions","radar","size","polygons","strokeColors","strokeWidth","connectorColors","fill","colors","opacity","markers","strokeColor","xaxis","labels","show","style","color","fontSize","fontFamily","categories","yaxis","tickAmount","methods","get_default_top_track_by_region","axios","get","setTimeout","tracks","console","log","onsloe","formattedData","map","e","i","x","region","y","agg_popularity","fetch_top_track_by_region","get_top_song","_date","Date","end_date","toISOString","split","then","res","catch","err","created","mounted","function","computed"],"sources":["src/components/SpotifyRegionTopTrack.vue"],"sourcesContent":["<template>\r\n  <div id=\"spotify-region-top-track-chart\">\r\n    <div class=\"toolbar\">\r\n      <v-row justify=\"end\">\r\n        <v-col cols=\"8\">\r\n          <div class=\"index_number\">\r\n            {{ selected_track }}\r\n          </div>\r\n        </v-col>\r\n        <v-col cols=\"4\" lg=\"4\" class=\"align-content-end\">\r\n          <v-select\r\n              :items=\"track_list\"\r\n              label=\"Select Track\"\r\n              dense\r\n              filled\r\n              rounded\r\n              v-model=\"selected_track\"\r\n              item-color=\"orange darken-1\"\r\n              v-on:change=\"fetch_top_track_by_region\"\r\n          ></v-select>\r\n        </v-col>\r\n        <v-col cols=\"12\">\r\n          <div class=\"chart-latest-update\">\r\n            <span>Last updated\r\n              <span>{{ this.latest_date }}</span>\r\n            </span>\r\n          </div>\r\n        </v-col>\r\n      </v-row>\r\n    </div>\r\n    <apexchart\r\n        ref=\"chart\"\r\n        width=\"100%\"\r\n        height=\"100%\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n    >\r\n    </apexchart>\r\n  </div>\r\n</template>\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\n\r\nexport default {\r\n  name: \"SpotifyRegionTopTrack\",\r\n  components: {\r\n    apexchart: VueApexCharts,\r\n  },\r\n  data() {\r\n    return {\r\n      index_number: \"\",\r\n      latest_date: \"\",\r\n      series: [],\r\n      track_list: [],\r\n      top_one_song: \"fox\",\r\n      selected_track: \"\",\r\n      chartOptions: {\r\n        chart: {\r\n          height: '100%',\r\n          width: '100%',\r\n          type: 'radar',\r\n          dropShadow: {\r\n            enabled: true,\r\n            blur: 1,\r\n            left: 1,\r\n            top: 1\r\n          }\r\n        },\r\n        stroke: {\r\n          width: 2\r\n        },\r\n        plotOptions: {\r\n          radar: {\r\n            size: 100,\r\n            polygons: {\r\n              strokeColors: '#202850',\r\n              strokeWidth: 1,\r\n              connectorColors: ['#808080','#f1f1f1'],\r\n              fill: {\r\n                colors: ['#fcfcfc']\r\n              }\r\n            }\r\n          }\r\n        },\r\n        fill: {\r\n          opacity: 0.1\r\n        },\r\n        colors: ['#FF4560'],\r\n        markers: {\r\n          size: 5,\r\n          colors: ['#fff'],\r\n          strokeColor: '#FF4560',\r\n          strokeWidth: 2,\r\n        },\r\n        xaxis: {\r\n          labels: {\r\n            show: true,\r\n            style: {\r\n              color: [\"#101d4d\"],\r\n              fontSize: \"20px\",\r\n              fontFamily: \"Cairo\"\r\n            }\r\n          },\r\n          categories: ['Asia', 'North America', 'South America', 'Oceania', 'Europe']\r\n        },\r\n        yaxis: {\r\n          show: true,\r\n\r\n          tickAmount: 6\r\n        }\r\n      },\r\n    }\r\n  },\r\n  methods: {\r\n    async get_default_top_track_by_region() {\r\n      const {data} = await this.axios.get('http://localhost/api/spotify/top-track/region?'\r\n          + \"track=\" + this.top_one_song,\r\n          {setTimeout: 10000})\r\n\r\n      this.tracks = data['result'][0][\"track_info\"]\r\n      this.track_list = data[\"track_select_list\"][0][\"track\"]\r\n      console.log(this.track_list)\r\n\r\n      // this.latest_date = data['result'][0]['date']\r\n      onsloe.log(this.tracks)\r\n\r\n      const formattedData = this.tracks.map((e, i) => {\r\n        return {\r\n          x: e.region,\r\n          y: e.agg_popularity\r\n        }\r\n      })\r\n      // console.log(formattedData)\r\n\r\n      // update the series with axios data\r\n      this.series = [\r\n        {\r\n          name: this.tracks,\r\n          data: formattedData,\r\n        }\r\n      ]\r\n    },\r\n    async fetch_top_track_by_region() {\r\n      const {data} = await this.axios.get('http://localhost/api/spotify/top-track/region?'\r\n          + \"track=\" + this.selected_track,\r\n          {setTimeout: 10000})\r\n\r\n      this.tracks = data['result'][0][\"track_info\"]\r\n      this.track_list = data[\"track_select_list\"][0][\"track\"]\r\n\r\n      // this.latest_date = data['result'][0]['date']\r\n      // consloe.log(this.tracks)\r\n\r\n      const formattedData = this.tracks.map((e, i) => {\r\n        return {\r\n          x: e.region,\r\n          y: e.agg_popularity\r\n        }\r\n      })\r\n      // console.log(formattedData)\r\n\r\n      // update the series with axios data\r\n      this.series = [\r\n        {\r\n          name: this.tracks,\r\n          data: formattedData,\r\n        }\r\n      ]\r\n    },\r\n    async get_top_song() {\r\n      let _date = new Date()\r\n      this.end_date = _date.toISOString().split('T')[0]\r\n\r\n      await this.axios.get(\"http://localhost/api/spotify/top-track?\"\r\n          + \"end=\" + this.end_date\r\n          + \"&country=\" + \"KR\"\r\n          + \"&drange=\" + \"\",\r\n          {setTimeout: 5000})\r\n      .then(res => {\r\n        this.top_one_song = res.data[\"posts\"][0][\"top_track\"][0][\"track\"]\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n    }\r\n  },\r\n  created() {\r\n    this.get_top_song();\r\n    this.get_default_top_track_by_region();\r\n    this.fetch_top_track_by_region();\r\n  },\r\n  mounted: {\r\n    function() {\r\n      this.get_default_top_track_by_region();\r\n      this.fetch_top_track_by_region();\r\n    }\r\n  },\r\n  computed: {\r\n    function() {\r\n      this.get_top_song();\r\n    }\r\n  },\r\n}\r\n</script>\r\n<style scoped>\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}