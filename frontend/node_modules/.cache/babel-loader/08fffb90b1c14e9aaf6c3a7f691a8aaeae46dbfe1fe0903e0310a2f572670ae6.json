{"ast":null,"code":"import VueApexCharts from \"vue-apexcharts\";\nexport default {\n  name: \"SpotifyTopTrack\",\n  components: {\n    apexchart: VueApexCharts\n  },\n  data: function () {\n    return {\n      drange: \"1d\",\n      end_date: new Date().toISOString().slice(0, 10),\n      selected_country: \"\",\n      country: \"KR\",\n      country_list: [{\n        value: \"KR\",\n        text: \"South Korea\"\n      }, {\n        value: \"HK\",\n        text: \"Hong Kong\"\n      }, {\n        value: \"IN\",\n        text: \"India\"\n      }, {\n        value: \"ID\",\n        text: \"Indonesia\"\n      }, {\n        value: \"JP\",\n        text: \"Japan\"\n      }, {\n        value: \"MY\",\n        text: \"Malaysia\"\n      }, {\n        value: \"MO\",\n        text: \"Macao\"\n      }, {\n        value: \"PH\",\n        text: \"Philippines\"\n      }, {\n        value: \"TW\",\n        text: \"Taiwan\"\n      }, {\n        value: \"TH\",\n        text: \"Thailand\"\n      }, {\n        value: \"VN\",\n        text: \"Vietnam\"\n      },\n      //Asia\n      {\n        value: \"CA\",\n        text: \"Canada\"\n      }, {\n        value: \"US\",\n        text: \"United States\"\n      }, {\n        value: \"BR\",\n        text: \"Brazil\"\n      }, {\n        value: \"MX\",\n        text: \"Mexico\"\n      },\n      // North America & South America\n      {\n        value: \"IT\",\n        text: \"Italy\"\n      }, {\n        value: \"FR\",\n        text: \"France\"\n      }, {\n        value: \"DE\",\n        text: \"Germany\"\n      }, {\n        value: \"ES\",\n        text: \"Spain\"\n      }, {\n        value: \"GB\",\n        text: \"United Kingdom\"\n      },\n      //Europe\n      {\n        value: \"AU\",\n        text: \"Australia\"\n      }],\n      //Oceania\n      selection: \"\",\n      top_one: \"\",\n      latest_date: \"\",\n      series: [],\n      chartOptions: {\n        chart: {\n          height: '100%',\n          weight: '100%',\n          type: 'bar',\n          stacked: false,\n          toolbar: {\n            offsetX: 50\n          }\n        },\n        dataLabels: {\n          enabled: false\n        },\n        fill: {\n          type: 'gradient',\n          gradient: {\n            shade: 'dark',\n            type: \"horizontal\",\n            shadeIntensity: 0.5,\n            gradientToColors: undefined,\n            // optional, if not defined - uses the shades of same color in series\n            inverseColors: true,\n            opacityFrom: 1,\n            opacityTo: 1,\n            stops: [0, 50, 100],\n            colorStops: []\n          }\n        },\n        grid: {\n          show: false,\n          yaxis: {\n            lines: {\n              show: false\n            }\n          }\n        },\n        plotOptions: {\n          bar: {\n            borderRadius: 7,\n            borderRadiusApplication: 'around',\n            horizontal: true,\n            columnWidth: '50%',\n            colors: {\n              backgroundBarColors: ['#eeeeee'],\n              backgroundBarRadius: 10\n            }\n          }\n        },\n        colors: ['#863af6', '#18E7F2', '#8EDB21', '#F29518'],\n        legend: {\n          show: false\n        },\n        yaxis: {\n          type: 'category',\n          labels: {\n            show: true,\n            align: 'right',\n            minWidth: 0,\n            maxWidth: 200,\n            trim: true,\n            style: {\n              colors: [],\n              fontSize: '14px',\n              fontFamily: 'Cairo, sans-serif',\n              fontWeight: 400,\n              cssClass: 'apexcharts-yaxis-label'\n            }\n          },\n          // display axis border\n          axisBorder: {\n            show: false\n          }\n        },\n        xaxis: {\n          type: 'category',\n          max: 100,\n          tickAmount: 5,\n          axisBorder: {\n            show: false\n          }\n        },\n        tooltip: {\n          theme: 'light',\n          custom: function ({\n            series,\n            seriesIndex,\n            dataPointIndex,\n            w\n          }) {\n            var data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];\n            return '<div class=\"arrow_box\">' + \"<ul>\" + \"<span>\" + \"<li>\" +\n            // w.globals.labels[dataPointIndex] +\n            w.globals.labels[dataPointIndex] + \": \" + series[seriesIndex][dataPointIndex].toLocaleString() + \"</li>\" + \"</span>\" + \"</ul>\" + \"</div>\";\n          }\n        }\n      }\n    };\n  },\n  methods: {\n    async get_default_top_track() {\n      let _date = new Date();\n      this.end_date = _date.toISOString().split('T')[0];\n      const {\n        data\n      } = await this.axios.get(\"http://localhost/api/spotify/top-track?\" + \"end=\" + this.end_date + \"&country=\" + this.country + \"&drange=\" + this.drange, {\n        setTimeout: 10000\n      });\n      this.tracks = data[\"posts\"][0][\"top_track\"];\n      this.latest_date = data[\"posts\"][0][\"datetime\"];\n      this.top_one = data[\"posts\"][0][\"top_track\"][0][\"track\"];\n      console.log(this.tracks);\n\n      // Format data correctly\n      let top_tracks = this.tracks.map((e, i) => {\n        return {\n          x: e.track,\n          y: e.popularity\n        };\n      });\n\n      // update the series with axios data\n      this.series = [{\n        name: 'Tracks',\n        data: top_tracks\n      }];\n    },\n    async fetch_top_track() {\n      let _date = new Date();\n      this.end_date = _date.toISOString().split('T')[0];\n      const {\n        data\n      } = await this.axios.get(\"http://localhost/api/spotify/top-track?\" + \"end=\" + this.end_date + \"&country=\" + this.selected_country + \"&drange=\" + this.drange, {\n        setTimeout: 10000\n      });\n      this.tracks = data[\"posts\"][0][\"top_track\"];\n      this.latest_date = data[\"posts\"][0][\"datetime\"];\n      this.top_one = data[\"posts\"][0][\"top_track\"][0][\"track\"];\n      console.log(this.tracks);\n\n      // Format data correctly\n      let top_tracks = this.tracks.map((e, i) => {\n        return {\n          x: e.track,\n          y: e.popularity\n        };\n      });\n\n      // update the series with axios data\n      this.series = [{\n        name: 'Tracks',\n        data: top_tracks\n      }];\n    }\n  },\n  created() {\n    this.get_default_top_track();\n    this.fetch_top_track();\n  },\n  mounted:\n  //set kr as default\n  function () {\n    this.get_default_top_track(() => {\n      this.fetch_top_track();\n    });\n  }\n};","map":{"version":3,"names":["VueApexCharts","name","components","apexchart","data","drange","end_date","Date","toISOString","slice","selected_country","country","country_list","value","text","selection","top_one","latest_date","series","chartOptions","chart","height","weight","type","stacked","toolbar","offsetX","dataLabels","enabled","fill","gradient","shade","shadeIntensity","gradientToColors","undefined","inverseColors","opacityFrom","opacityTo","stops","colorStops","grid","show","yaxis","lines","plotOptions","bar","borderRadius","borderRadiusApplication","horizontal","columnWidth","colors","backgroundBarColors","backgroundBarRadius","legend","labels","align","minWidth","maxWidth","trim","style","fontSize","fontFamily","fontWeight","cssClass","axisBorder","xaxis","max","tickAmount","tooltip","theme","custom","seriesIndex","dataPointIndex","w","globals","initialSeries","toLocaleString","methods","get_default_top_track","_date","split","axios","get","setTimeout","tracks","console","log","top_tracks","map","e","i","x","track","y","popularity","fetch_top_track","created","mounted"],"sources":["src/components/SpotifyTopTrack.vue"],"sourcesContent":["<template>\r\n  <div id=\"spotify-top-track-chart\">\r\n    <!--  dropdown menu of music broadcast programs  -->\r\n    <div class=\"toolbar\">\r\n      <v-row justify=\"start\">\r\n        <v-col cols=\"8\">\r\n          <div class=\"index_number\">\r\n            <v-img\r\n                src=\"https://mishkan-ltd.s3.ap-northeast-2.amazonaws.com/web-img/medal-gold.svg\"\r\n                max-height=\"30\"\r\n                max-width=\"30\"\r\n            >\r\n            </v-img>\r\n            {{ this.top_one }}\r\n          </div>\r\n          <div class=\"chart-latest-update\">\r\n            <span>Last updated\r\n              <span>{{ this.latest_date }}</span>\r\n            </span>\r\n          </div>\r\n        </v-col>\r\n        <v-col cols=\"4\" lg=\"4\" class=\"align-content-end\">\r\n          <v-select\r\n              :items=\"country_list\"\r\n              label=\"Select Country\"\r\n              dense\r\n              filled\r\n              rounded\r\n              v-model=\"selected_country\"\r\n              item-color=\"orange darken-1\"\r\n              :item-text=\"text\"\r\n              :item-value=\"value\"\r\n              v-on:change=\"fetch_top_track\"\r\n          ></v-select>\r\n        </v-col>\r\n      </v-row>\r\n    </div>\r\n    <apexchart\r\n        ref=\"chart\"\r\n        width=\"90%\"\r\n        height=\"350\"\r\n        :options=\"chartOptions\"\r\n        :series=\"series\"\r\n    >\r\n    </apexchart>\r\n  </div>\r\n</template>\r\n<script>\r\nimport VueApexCharts from \"vue-apexcharts\";\r\nexport default {\r\n  name: \"SpotifyTopTrack\",\r\n  components: {\r\n    apexchart: VueApexCharts,\r\n  },\r\n  data: function () {\r\n    return {\r\n      drange: \"1d\",\r\n      end_date: new Date().toISOString().slice(0, 10),\r\n      selected_country: \"\",\r\n      country: \"KR\",\r\n      country_list: [\r\n        {value: \"KR\", text: \"South Korea\"},\r\n        {value: \"HK\", text: \"Hong Kong\"},\r\n        {value: \"IN\", text: \"India\"},\r\n        {value: \"ID\", text: \"Indonesia\"},\r\n        {value: \"JP\", text: \"Japan\"},\r\n        {value: \"MY\", text: \"Malaysia\"},\r\n        {value: \"MO\", text: \"Macao\"},\r\n        {value: \"PH\", text: \"Philippines\"},\r\n        {value: \"TW\", text: \"Taiwan\"},\r\n        {value: \"TH\", text: \"Thailand\"},\r\n        {value: \"VN\", text: \"Vietnam\"}, //Asia\r\n        {value: \"CA\", text: \"Canada\"},\r\n        {value: \"US\", text: \"United States\"},\r\n        {value: \"BR\", text: \"Brazil\"},\r\n        {value: \"MX\", text: \"Mexico\"}, // North America & South America\r\n        {value: \"IT\", text: \"Italy\"},\r\n        {value: \"FR\", text: \"France\"},\r\n        {value: \"DE\", text: \"Germany\"},\r\n        {value: \"ES\", text: \"Spain\"},\r\n        {value: \"GB\", text: \"United Kingdom\"}, //Europe\r\n        {value: \"AU\", text: \"Australia\"}], //Oceania\r\n      selection: \"\",\r\n      top_one: \"\",\r\n      latest_date: \"\",\r\n      series: [],\r\n      chartOptions: {\r\n        chart: {\r\n          height: '100%',\r\n          weight: '100%',\r\n          type: 'bar',\r\n          stacked: false,\r\n          toolbar: {\r\n            offsetX: 50\r\n          }\r\n        },\r\n        dataLabels: {\r\n          enabled: false\r\n        },\r\n        fill: {\r\n          type: 'gradient',\r\n          gradient: {\r\n            shade: 'dark',\r\n            type: \"horizontal\",\r\n            shadeIntensity: 0.5,\r\n            gradientToColors: undefined, // optional, if not defined - uses the shades of same color in series\r\n            inverseColors: true,\r\n            opacityFrom: 1,\r\n            opacityTo: 1,\r\n            stops: [0, 50, 100],\r\n            colorStops: []\r\n          }\r\n        },\r\n        grid: {\r\n          show: false,\r\n          yaxis: {\r\n            lines: {\r\n              show: false\r\n            }\r\n          },\r\n        },\r\n        plotOptions: {\r\n          bar: {\r\n            borderRadius: 7,\r\n            borderRadiusApplication: 'around',\r\n            horizontal: true,\r\n            columnWidth: '50%',\r\n            colors: {\r\n              backgroundBarColors: ['#eeeeee'],\r\n              backgroundBarRadius: 10\r\n            }\r\n          }\r\n        },\r\n        colors: ['#863af6', '#18E7F2', '#8EDB21', '#F29518'],\r\n        legend: {\r\n          show: false\r\n        },\r\n        yaxis: {\r\n          type: 'category',\r\n          labels: {\r\n            show: true,\r\n            align: 'right',\r\n            minWidth: 0,\r\n            maxWidth: 200,\r\n            trim: true,\r\n            style: {\r\n              colors: [],\r\n              fontSize: '14px',\r\n              fontFamily: 'Cairo, sans-serif',\r\n              fontWeight: 400,\r\n              cssClass: 'apexcharts-yaxis-label',\r\n            },\r\n          },\r\n          // display axis border\r\n          axisBorder: {\r\n            show: false\r\n          }\r\n        },\r\n        xaxis: {\r\n          type: 'category',\r\n          max: 100,\r\n          tickAmount: 5,\r\n          axisBorder: {\r\n            show: false\r\n          }\r\n        },\r\n        tooltip: {\r\n          theme: 'light',\r\n          custom: function ({series, seriesIndex, dataPointIndex, w}) {\r\n            var data = w.globals.initialSeries[seriesIndex].data[dataPointIndex];\r\n            return (\r\n                '<div class=\"arrow_box\">' +\r\n                \"<ul>\" +\r\n                \"<span>\" +\r\n                \"<li>\" +\r\n                // w.globals.labels[dataPointIndex] +\r\n                w.globals.labels[dataPointIndex] +\r\n                \": \" +\r\n                (series[seriesIndex][dataPointIndex]).toLocaleString() +\r\n                \"</li>\" +\r\n                \"</span>\" +\r\n                \"</ul>\" +\r\n                \"</div>\"\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    async get_default_top_track() {\r\n      let _date = new Date()\r\n      this.end_date = _date.toISOString().split('T')[0]\r\n\r\n      const {data} = await this.axios.get(\"http://localhost/api/spotify/top-track?\"\r\n          + \"end=\" + this.end_date\r\n          + \"&country=\" + this.country\r\n          + \"&drange=\" + this.drange,\r\n          {setTimeout: 10000})\r\n      this.tracks = data[\"posts\"][0][\"top_track\"]\r\n      this.latest_date = data[\"posts\"][0][\"datetime\"]\r\n      this.top_one = data[\"posts\"][0][\"top_track\"][0][\"track\"]\r\n      console.log(this.tracks)\r\n\r\n      // Format data correctly\r\n      let top_tracks = this.tracks.map((e, i) => {\r\n        return {\r\n          x: e.track,\r\n          y: e.popularity,\r\n        };\r\n      });\r\n\r\n      // update the series with axios data\r\n      this.series = [\r\n        {\r\n          name: 'Tracks',\r\n          data: top_tracks,\r\n        }\r\n      ];\r\n    },\r\n    async fetch_top_track() {\r\n      let _date = new Date()\r\n      this.end_date = _date.toISOString().split('T')[0]\r\n\r\n      const {data} = await this.axios.get(\"http://localhost/api/spotify/top-track?\"\r\n          + \"end=\" + this.end_date\r\n          + \"&country=\" + this.selected_country\r\n          + \"&drange=\" + this.drange,\r\n          {setTimeout: 10000})\r\n      this.tracks = data[\"posts\"][0][\"top_track\"]\r\n      this.latest_date = data[\"posts\"][0][\"datetime\"]\r\n      this.top_one = data[\"posts\"][0][\"top_track\"][0][\"track\"]\r\n      console.log(this.tracks)\r\n\r\n      // Format data correctly\r\n      let top_tracks = this.tracks.map((e, i) => {\r\n        return {\r\n          x: e.track,\r\n          y: e.popularity,\r\n        };\r\n      });\r\n\r\n      // update the series with axios data\r\n      this.series = [\r\n        {\r\n          name: 'Tracks',\r\n          data: top_tracks,\r\n        }\r\n      ];\r\n    }\r\n  },\r\n  created() {\r\n    this.get_default_top_track();\r\n    this.fetch_top_track();\r\n  },\r\n  mounted: //set kr as default\r\n      function () {\r\n        this.get_default_top_track(() => {\r\n          this.fetch_top_track();\r\n        })\r\n      }\r\n}\r\n</script>\r\n<style scoped>\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}